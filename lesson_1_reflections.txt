How did viewing a diff between two versions of a file help you see a bug that was introduced?

Without using diff, I would have had to manually peer through many lines of code on two separate pages and try to find the differences myself.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

You could easily see different versions to spot bugs.  If you didn't like the version that you were currently on, you could back out of it.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pros: You can shoose when to do it at logical places, so it will make sense.
Cons: You have to actually remember to do it consistently, or else changes could accumulate.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

With code files, some code may reference code in other files, like linking to a CSS stylesheet in an HTML document. This is why you would want to save in mulitple files.  IN Google Docs, you are often only working on one doc at a time.

How can you use the commands git log and git diff to view the history of files?

You can use "git log" to find out what commit's happened and they're associated id's and messages.  You can then use "git diff" on these id's. The format is "git diff original-id new-id".

How might using version control make you more confident to make changes that could break something?

You are more confident because you can always go back to your previous version of code.

Now that you have your workspace set up, what do you want to try using Git for?

I want to use it primarily for my Udacity coding projects.